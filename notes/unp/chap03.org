#+TITLE: 套接字编程简介

* 套接字编程简介
** 概述
** 套接字地址
比较多琐碎的知识，其中 ~sin_family~, ~sin_port~ 和 ~sin_addr~ 是必需的，对应 ~sin_family~ 和 ~sin_port~ 都有一定类型要求（长度为多少位的整形）， ~sin_addr~ 因为历史原因，被实现为一个结构体。

注意到本书会讨论的五种套接字地址结构：IPv4, IPv6, Unix 域, 数据链路和存储，会在结构大小上有所不同，前两者是固定长度的，三四是可变长度的，最后一种直接使用系统最大长度。
** 值-结果参数[fn:1]
传递套接字地址结构是，总是以 *引用* 形式来传递，传递方式取决于传递方向：

1. 从进程到内核： ~bind~, ~connect~ 和 ~sendto~ ，这些函数的一个参数是指向套接字地址结构的指针，另一个参数是该结构的整数大小。内核由此知道需要从进程复制多少数据。
2. 从内核到进程： ~accept~, ~recvfrom~, ~getsockname~ 和 ~getpeername~ 这些函数其中两个参数，一个是指向套接字地址结构的指针，另一个是指向表示该结构大小的 *整数变量的指针* 。

#+BEGIN_QUOTE
把套接字地址结构大小这个参数从一个整数改为指向某个整数变量的指针，其原因在于:当函 数被调用时，结构大小是一个值(value)，它告诉内核该结构的大小，这样内核在写该结构时 不至于越界;当函数返回时，结构大小又是一个结果(result)，它告诉进程内核在该结构中究 竟存储了多少信息。这种类型的参数称为值—结果(value-result)参数。
#+END_QUOTE
** 字节排序函数
** 字节操纵函数
以下省略
** 小结


** Footnotes

[fn:1] 不得不说这是 c 不支持多值返回的结果啊，不过也可能是性能考虑吧。
