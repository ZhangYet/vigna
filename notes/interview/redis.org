* redis

** redis 分布式锁 

单机版：

#+BEGIN_SRC
SET resource_name my_random_value NX PX 30000
n#+END_SRC

要点：

1. 当前 resource_name 不存在的时候才能 SET 成功；
2. 有超时时间，防止锁不释放；
3. 设置 my_random_value 防止其他线程误释放锁；

集群版：

1. 依次向多个节点申请锁，多数节点获得锁的时候成功获得锁；
2. 后面的锁要减去获取锁的时间；
3. 释放锁的时候要依次释放锁；
4. 获取锁失败要释放成功节点上的锁；

** redis 数据类型(以及对应的底层实现)

1. 字符串对象：int, raw and embstr;
2. 列表对象： quick_list;
3. hash 对象：ziplist 或者 hashtable；
4. 集合对象：intset 或者 hashtable；
5. 有序集合：ziplist 或者 skiplist;

6. pub/sub: server 两个 dict 保存频道和模式匹配的客户端，一旦有消息发布就推送到对应的客户端。

** rehash 过程

dictExpand 之后，会进入 rehash 状态（将 rehash_idx 置为0）。之后会渐进式 rehash。

rehash 过程中，每次访问 key， 都会触发一次 step rehash，step rehash 会 rehash 至多一个 key。

另外 databaseCron 每个周期也会 rehash 一批（最多100个）。

写的时候，会直接写到 ht[1], 读和删的时候会先查 ht[0] 和 ht[1]。

等 ht[0] 的 used 变成0，rehash 结束。

** redis 持久化

两种持久化方式：优先使用 AOF 文件载入，如果不存在 AOF，那么使用 RDB。

*** RDB

~SAVE()~ 会阻塞，而 ~BGSAVE()~ 会先 fork 出子进程，然后保存，保存的过程会拒绝其他 ~SAVE()~ 和 ~BGSAVE()~ 请求。

自动的保存，会在 serverCron 中执行，配置文件可以配置多个自动保存的触发条件。

*** AOF 

按照命令请求协议格式保存一个文本文件。

redis 有 aof_buffer，每个事件循环之后， ~flushAppendOnlyFile()~ 将 buffer 写入 AOF 文件中。

载入的时候， redis 实例通过伪客户端将 AOF 文件中的命令写入。

处理 AOF 重写的过程中，追加的命令： AOF 重写缓冲区，当 AOF 重写结束后，将 AOF 重写缓冲区的内容写入新的 AOF 文件，再把此 AOF 文件与旧的 AOF 文件原子替换。

AOF重写是一个有歧义的名字，该功能是通过读取数据库中的键值对来实现的，程序无须对现有AOF文件进行任何读入、分析或者写入操作。

