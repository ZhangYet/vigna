#+OPTIONS: ^:nil
#+TITLE: 工作经验
* 工作经历（自我介绍）
  :PROPERTIES:
  :UNNUMBERED: t
  :END:
** 第一份工作
我2015年毕业，加入了北京希尔瑞斯公司。

主要参与开发容器编排系统[fn:9]，这个系统可以看作一个简化版的 k8s, 主要是根据集群资源情况部署不同的容器。

** 第二份工作
2017年加入滴滴[fn:3]，主要负责用户平台系统开发。用户平台系统负责用户管理（包括注册、登录和消息通知等）和虚拟资源购买与计费。

用户系统平台所有持久化数据都保存在 *MySQL* 中，使用了 *redis* 作为缓存，我们会直接通过下游管控提供的 sdk 对下游管控发异步请求，下游管控会通过 *消息队列* 通知资源状况变更[fn:5]。

这个系统由多个相对独立[fn:4]的模块组成，具体如下：

1. api 模块提供用户相关的接口；
2. metering 模块接收消息队列的消息；
3. task_center 执行异步任务，涉及虚拟资源生命周期（包括创建成功、计费、包月资源到期后回收）的逻辑基本都是由 task_center 处理。
4. pay 模块提供询价接口；
5. gateway 模块后来被 proxy_pass 模块替代，proxy_pass 模块将请求转发到后端管控；

我加入滴滴云团队的时候，这个项目已经大致成型。很多时候我做的工作是将新的产品线接入用户系统中（主要是为这些产品开发 metering 模块和 task_center 模块的相应的逻辑）。

用户系统平台不同模块经历过几次重构。以 task_center 模块为例，最初它为虚拟机和 EIP 单独开发了计费任务和资源回收任务，但是随着接入的产品线增加，我设计了更统一的资源逻辑处理流程（将资源生命周期的任务抽象为完成订单、计费与回收），模板化了 task_center 部分的开发[fn:10]。同样 metering 模块也做过类似的重构。

简历里面提到其他一些项目就略过了[fn:11]

** 第三份工作
2019年加入 sixteenmarkets[fn:6]，这是一家金融科技公司。

我设计并开发了 fix-simulator，这是一个交易模拟器，用来取代开发和预发布环境中的商用产品 VeriFIX 的。它基于 FIX[fn:8] 协议的 go 引擎开发的，嵌入了一个 lua runtime，用户可以用 lua 脚本自定义订单交易行为。

此外我还做过第三方支付平台的接入，但是这部分工作还没有完成，我们公司就解散了。

** 最有难度的项目

其实难度最大的项目是滴滴云用户平台，但是这个「难度」并不光彩。我在维护这个系统的时候，最难处理的问题是计费任务的问题，这个问题涉及到资源状态和资源计费规则，我经常需要看一堆 info 级别的日志，这些日志通常包含大量的 SQL 语句。我必须从日志、源代码和数据库数据（而且数据的状态可能已经改变）中找到问题的所在。

但是这种难度它是设计失误+文档缺失造成的。如果可以，我会力求做到避免这种难度。

** 最有挑战性的项目

我会选 fix-simulator 这个项目，毕竟它是完全由我设计和实现的，敝帚自珍嘛。

这个需求是这样的：我们需要一个组件，它可以接收用 FIX 协议发送过来的股票订单，并且我们可以自定义所有的订单行为。

这里首先要解决的是选型的问题，因为 FIX 协议有官方的引擎实现，这部分的选型没有太大的问题。然后是怎样实现「自定义订单行为」，我们之前用的 VeriFIX 就是为每种 FIX 信息都提供多种复选框，等于它实现了一种 DSL。这种方案是很复杂的，滴滴云的计费规则就是一个前车之鉴。加上我们面向的最终用户是我们自己和客户的测试人员，所以选择一种动态语言，用脚本的方式实现，这是很恰当的——很自由，扩展性也很好。而且有一个很好的 [[https://github.com/yuin/gopher-lua][lua runtime 实现]][fn:7]。

总的来说这个项目很简单（它的请求量不可能很大），我希望我设计的系统或者说组件，都能有这种特性：简单但功能强大，有良好测试和文档。

** 有什么想问的吗

1. 今年有什么大的开发计划？
2. 为什么考虑从 cpp 转向 go，现在转化的进度如何了？

** Footnotes

[fn:11] 简历里面那个该死的 CSRF[fn:1] token[fn:2] 项目，保持登录的方式主要还是 Cookie + session。 

[fn:10] 首先，实际上这不是我的工作。其次，这个工作也很简单：搞了一个 go template，开发的之后只需要定义好一些必要的常数，就可以生成对应 task center 代码。 

[fn:9] (决定略过这部分的内容)这个系统是由当时的平台总监设计的，原来在2015年之前已经应用在芒果TV。我加入这个团队，参与了这个系统从1.0到2.0的升级。这个系统主要包括:

1. 计算集群资源编排容器的 core 组件，这个组件通过 etcd 记录集群状态——包括集群剩余资源和已部署的容器数量，远程调用 docker daemon 部署容器；
2. 监控节点和容器状态的 agent 组件，此外，agent 组件还提供容器指标收集功能；
3. 基于 openresty 的 loadbalancer；
4. 日志、监控以及CI/CD；

我参与了这个系统大部分组件的开发和维护，负责设计的部分不多，最主要的是 loadbalancer 部分的设计，我设计了一个 DSL 实现了复杂的转发逻辑，这套转发逻辑可以实现滚动升级。
 

[fn:8] 这是一个金融领域的数据交换协议。 

[fn:7] 其实 https://github.com/layeh/gopher-luar 也是居功至伟的。 

[fn:6] 离职理由：业务不见起色，但是代码质量低下，修 bug 疲于奔命，而且无力改变这个现象（真的）。同时我是广东人，这时候 sixteenmarkets 的朋友向我伸来橄榄枝（假的），所以我就回来了。

[fn:5] MySQL、redis 和消息队列都是由滴滴基础平台团队提供。 

[fn:4] 但是不同模块会共享数据库。 

[fn:3] 跳槽原因：希尔瑞斯公司的增长停滞了，同时人事斗争变得激烈。

[fn:2] 我们采用了令牌同步模式，登录的时候会下发一个 CSFT token。前端会把这个 token 放在一个 header 里面传回来。 

[fn:1] CSRF 攻击，其实是跨站伪造请求，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作。
