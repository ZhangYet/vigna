#+OPTIONS: ^:nil
* 工作经历（自我介绍）
** 第一份工作
我2015年毕业，加入了北京希尔瑞斯公司。

主要参与开发容器编排系统，我参与开发的组件包括：

1. 计算集群资源编排容器的 core 组件，这个组件通过 etcd 记录集群状态——包括集群剩余资源和已部署的容器数量，远程调用 docker daemon 部署容器；
2. 监控节点和容器状态的 agent 组件，此外，agent 组件还提供容器指标收集功能；
3. 基于 openresty 的 loadbalancer；
4. 基于 rsyslog 和 ELK 的日志系统；

** 第二份工作
2017年加入滴滴，主要负责用户平台系统开发。

用户平台系统负责用户管理（包括注册、登录和消息通知等）和虚拟资源购买与计费。

我主要参与开发的模块有：

1. proxy_pass 模块处理经 nginx 转发过来的请求。其中涉及资源变更的请求（比如购买虚拟资源、给虚拟资源扩容），会在用户系统创建订单（还要冻结用户账户金额），再将创建请求转发到对应的管控线；
2. metering 模块，这个模块接受消息队列发送过来的信息，并执行对应的动作。资源状态变更会通过消息队列发送通知，metering 模块接受到对应的模块后，会执行预注册的动作——比如接收到资源创建成功事件，我们会完成用户请求创建资源时的订单以及扣费；
3. task_center 模块完成各种异步任务，这些任务主要包括：资源计费（各种资源都会有对应资源实例的计费任务，每个计费周期执行一次）、用户状态检查（主要是检查用户是否欠费）、资源回收等；

这些模块随着业务的发展进行了多次重构，比如 metering 模块，这个模块原本每一种产品有独立的事件处理流程，我将所有事件处理流程统一起来，指定了事件上报标准（上报哪些事件和上报事件中要包含哪些数据），之后所有新的产品接入只需要定义对应的事件即可。

那个该死的 CSRF[fn:1] token[fn:2] 项目，保持登录的方式主要还是 Cookie + session。

** 第三份工作
2019年加入 sixteenmarkets，这是一家金融科技公司。

主要做了一个 fix-simulator，这个是用来替代一个商用产品 veri FIX 的。基于 FIX 协议的 go 实现开发，嵌入了一个 lua runtime，可以定制各种订单的交易行为，开发环境和预发布环境都会使用这个组件。

** Footnotes

[fn:2] 我们采用了令牌同步模式，登录的时候会下发一个 CSFT token。前端会把这个 token 放在一个 header 里面传回来。 

[fn:1] CSRF 攻击，其实是跨站伪造请求，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作。
