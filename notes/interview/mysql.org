* Mysql

** [[https://www.ibm.com/developerworks/cn/opensource/os-mysql-transaction-isolation-levels-and-locks/index.html][事务隔离级别和锁]]

   - Note taken on [2020-03-02 一 01:05] \\
     这篇文章没有说清楚行锁的算法。参考：[[*%5B%5Bhttps://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html%5D%5Binnodb %E9%94%81%5D%5D][innodb 锁]]
   - Note taken on [2020-03-02 一 01:04] \\
     什么是「聚簇索引」？A: [[*%5B%5Bhttps://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html%5D%5B%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%5D%5D][聚簇索引]]

*** ACID

A: 原子性；

C: 一致性——事务前后一致性约束不被破坏；

I：隔离性——不同事务对同一数据的操作互不影响；

D：持久性；

*** 四种隔离级别

读未提交：会出现脏读，事务1的操作还没有完成的时候，事务2就能读到事务1中的修改。

读提交：多次读取结果不同，事务1操作完成之前，事务2读到的是事务1完成之前的数据，事务1完成之后，事务2会读到提交之后的事务。

可重复读：事务在开始之后，只会读到事务开始时候的数据。会出现幻读。

序列化：事务1执行时，事务2会阻塞直到事务1完成。

*** 锁优化


** [[https://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html][聚簇索引]]

竟然就是主键（大部分时间是）。

** [[https://dev.mysql.com/doc/refman/5.7/en/innodb-locking.html][innodb 锁]]

shared 和 exclusive 锁倒还好理解，但是 record 锁 gap 锁这种概念就很难理解了。先放着吧。


** [[https://tech.meituan.com/2016/11/18/dianping-order-db-sharding.html][美团的分库分表经验]]

所以其实我们只做了垂直分库，水平分表。

** InnoDB 知识点

1. 支持行锁；
2. 支持外键与事务；


** 索引知识点

1. 最左前缀匹配；


** 悲观锁与乐观锁

** 解决死锁之路

*** [[https://www.aneasystone.com/archives/2017/10/solving-dead-locks-one.html][事务与隔离级别]]

    - Note taken on [2020-03-10 二 10:45] \\
      我觉得这篇文章的一致性理解跟隔离性串了。我还是用「事务前后保持约束」这种说法吧。

**** 概述
 脏读：没提交的事务被其他事务读取了。

 不可重复读：不可重复读和脏读的区别在于，脏读是读取了另一个事务未提交的修改，而不可重复读是读取了另一个事务提交之后的修改，本质上都是其他事务的修改影响了本事务的读取。

 幻读：幻读和不可重复读的区别在于，后者是两次读取同一条记录，得到不一样的结果；而前者是两次读取同一个范围内的记录，得到不一样的记录数（这种说法其实只是便于理解，但并不准确，因为可能存在另一个事务先插入一条记录然后再删除一条记录的情况，这个时候两次查询得到的记录数也是一样的，但这也是幻读，所以严格点的说法应该是：两次读取得到的结果集不一样）。很显然，不可重复读是因为其他事务进行了 UPDATE 操作，幻读是因为其他事务进行了 INSERT 或者 DELETE 操作。

 更新丢失：回滚覆盖（第一类更新丢失），提交覆盖（第二类更新丢失）。

 提交覆盖的示例：事务A给账户X加100块，事务B给账户减100块，事务开始的时候，两个事务都读取到账户余额1000块，假设事务A迟于事务B结束，那么最后账户余额是1100元。

 回滚覆盖的示例：事务A在事务B之后回滚，那么账户余额会回滚到事务A开始时候的状态，账户余额是1000元。

 #+NAME: 各种隔离级别处理并发问题的可能性
 | 隔离级别 | 回滚覆盖 | 脏读 | 不可重复读 | 提交覆盖 | 幻读 |
 |----------+----------+------+------------+----------+------|
 | 读未提交 | X        | 可能 | 可能       | 可能     | 可能 |
 | 读提交   | X        | X    | 可能       | 可能     | 可能 |
 | 可重复读 | X        | X    | X          | [fn:1]？ | 可能 |
 | 序列化   | X        | X    | X          | X        | X    |

**** 基于锁的隔离级别实现：

 | 隔离级别 | 锁操作                   | 描述                                                         |
 |----------+--------------------------+--------------------------------------------------------------|
 | 读未提交 | 写: 持续X锁, 读: 不加锁  | 事务读不阻塞其他事务读和写，事务写阻塞其他事务写但不阻塞读   |
 | 读提交   | 写: 持续X锁, 读: 临时S锁 | 事务读不会阻塞其他事务读和写，事务写会阻塞其他事务读和写     |
 | 可重复读 | 写: 持续X锁, 读: 持续S锁 | 事务读会阻塞其他事务写但不阻塞读，事务写会阻塞其他事务读和写 |
 | 序列化   | 使用表级锁               | 都不能并发了                                                 |

**** MVCC 下的隔离级别实现

#+BEGIN_QUOTE
RC 总是读取记录的最新版本，如果该记录被锁住，则读取该记录最新的一次快照，而 RR 是读取该记录事务开始时的那个版本。虽然这两种读取方式不一样，但是它们读取的都是快照数据，并不会被写操作阻塞，所以这种读操作称为 快照读（Snapshot Read），有时候也叫做 非阻塞读

除了 快照读 ，MySQL 还提供了另一种读取方式：当前读（Current Read），有时候又叫做 加锁读（Locking Read） 或者 阻塞读（Blocking Read），这种读操作读的不再是数据的快照版本，而是数据的最新版本，并会对数据加锁
#+END_QUOTE

**** 总结 
看完真的是「看山不是山」了。尤其是对 MySQL 能否避免幻读，真的是一头雾水。第一次用深度遍历读完了，第二次用广度遍历读。想不到还要考虑当前读和快照读的情况。

*** [[https://www.aneasystone.com/archives/2017/11/solving-dead-locks-two.html][了解常见的锁类型]]

**** 表锁与行锁

顺便补充一下 InnoDB 的索引知识：主索引采用 B 树，叶节点存储数据，辅助索引存储主键。

四种锁：

1. LOCK_ORDINARY：也称为 Next-Key Lock，锁一条记录及其之前的间隙，这是 RR 隔离级别用的最多的锁，从名字也能看出来；
2. LOCK_GAP：间隙锁，锁两个记录之间的 GAP，防止记录插入；
3. LOCK_REC_NOT_GAP：只锁记录；
4. LOCK_INSERT_INTENSION：插入意向 GAP 锁，插入记录时使用，是 LOCK_GAP 的一种特例。

**** 读锁 vs 写锁

锁模式：

1. LOCK_IS：读意向锁，只应用在表锁上；
2. LOCK_IX：写意向锁，同上，意向锁互不冲突；
3. LOCK_S：读锁，与 IS 和 S 兼容，其他冲突；
4. LOCK_X：写锁，与所有锁冲突；
5. LOCK_AUTO_INC：自增锁，与意向锁兼容；

**** 锁类型

***** 记录锁

只对要操作的行上锁。如果不能使用索引的话，会使用主索引全表扫描，所有行都会上锁知道确认不是需要操作的行。

***** Gap Lock

在 RR 的情况下，会加 Gap lock 确保索引一个范围内的行不会被插入（解决幻读）。

***** Next-key lock

Gap lock 不包括记录本身，但是 Next-key lock 会，所以前者是以 id=5 为端点的两个开区间，后者是包括 id=5 的座开右闭区间。

** Footnotes

[fn:1]  网上对此有很多不一致的说法，其实也是因为 MySQL 的实现和 ANSI-SQL 标准之间的差异，在标准的传统实现中，RR 隔离级别是使用持续的 X 锁和持续的 S 锁来实现的（参看下面的 “隔离级别的实现” 一节），由于是持续的 S 锁，所以避免了其他事务有写操作，也就不存在提交覆盖问题。但是 MySQL 在 RR 隔离级别下，普通的 SELECT 语句只是快照读，没有任何的加锁，和标准的 RR 是不一样的。如果要让 MySQL 在 RR 隔离级别下不发生提交覆盖，可以使用 SELECT ... LOCK IN SHARE MODE 或者 SELECT ... FOR UPDATE 。作者原著。

