#+TITLE: gunicorn 源码阅读笔记
#+OPTIONS: ^:nil
#+OPTIONS: num:nil
#+HTML_HEAD: <link rel="stylesheet" href="https://latex.now.sh/style.css">
源码阅读最重要的就是搞清楚「我希望在阅读过程中解决什么问题」。
* gunicorn 在初始化的时候做了什么？
当我们执行诸如 ~gunicorn --workers=3 --worker-class=gevent test:app~ 这样的命令时， gunicorn 的入口是 ~wsgiapp.run()~, 它初始化了 ~WSGIApplication~ 类并运行它的 ~run()~ 方法。
** WSGIApplication 类的初始化

 ~WSGIApplication~ 类继承 ~Application~ 类， 重载了 ~init()~, ~load_config()~ 和 ~load()~ 方法。 ~Application~ 类继承了 ~BaseApplication~ 类，重载了 ~load_config()~ 和 ~run()~ 方法。

 初始化 ~WSGIApplication~ 类就是执行 ~BaseApplication~ 类的 ~__init__()~ 方法。这个方法初始化了类属性，并调用 ~do_load_config()~ 方法。

 ~do_load_config()~ 方法会先调用 ~load_default_config()~ 方法初始化一个 ~Config~ 类实例。然后调用 ~load_config()~ 方法——因为类继承的关系，这里的调用的是 ~WSGIApplication~ 类的 ~load_config()~ 方法（这个方法会通过 ~super()~ 调用 ~BaseApplication~ 类中的 ~load_config()~ ）。

至此，初始化的工作完成，注意到此时我们需要 serve 的 app 还没有实际载入。这个初始化过程没有太多复杂的逻辑，显得绕是因为有两层继承关系。
** run()
初始化完策划那个的 ~WSGIApplication~ 实例会执行 ~Application~ 的 ~run()~ 方法（因为没有重载），如果设置了 ~--print-config~ 或者 ~--check-config~ ，那么实例会执行 ~load()~ 方法，然后退出。此外还有 daemonize 的相应逻辑，重点在 ~BaseApplication~ 类的 ~run()~ 方法。

在 ~BaseApplication~ 的 ~run()~ 方法中， ~BaseApplication~ 会把实例本身作为参数初始化 ~Arbiter~ 类，并执行 ~Arbiter~ 类的 ~run()~ 方法。 ~Arbiter~ 类是整个 gunicorn 的核心。


*** Arbiter 类的初始化

