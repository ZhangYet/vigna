** 进程的终止

*** `_exit()` 和 `exit()`

程序终止的第一种方法： ~_exit()~

~void _exit(int status)~ status 定义了进程的终止状态，仅有低8位可用。 调用 ~_exit()~ 的程序总会成功终止。

~void exit(int status)~ 封装了 ~_exit()~

1. 调用退出处理函数；
2. 刷新 stdio 缓冲区；
3. 调用 ~_exit()~;

另一种方法：从 main 中 return。

如果没有指定 return 的值，c89 和 c99 的处理不一样；

*** 进程终止的细节

无论进程是否正常终止，都会发生如下动作：

1. 关闭所有打开的文件描述符、目录流、信息目录描述符以及字符转换描述符；
2. 释放所有文件锁；
3. 分离共享内存段；
4. 管理进程会给进程组下的进程发送 SIGHUP 信号；
5. sem_close() 关闭打开的信号量；
6. mq_close() 关闭打开的队列；
7. 其他；

终止进程要干的活还真的很复杂啊。

*** 退出处理程序

#+BEGIN_QUOTE
通过fork()创建的子进程会继承父进程注册的退出处理函数。而进程调用exec()时，会移除所有已注册的退出处理程序。（这是结果势所必然，因为exec()会替换包括退出处理程序在内的所有原程序代码段。）

[德]Michael Kerrisk. Linux/UNIX系统编程手册(上、下册) (Chinese Edition) (Kindle 位置 9900-9902). Kindle 版本. 
#+END_QUOTE

~atexit()~ 跟 ~on_exit()~ 的区别：前者无法知道退出状态，退出处理函数也没有参数。
