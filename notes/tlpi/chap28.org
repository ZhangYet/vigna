** 详述进程创建和程序执行

*** 进程记账

#+BEGIN_QUOTE
打开进程记账功能后，内核会在每个进程终止时将一条记账信息写入系统级的进程记账文件。这条账单记录包含了内核为该进程所维护的多种信息，包括终止状态以及进程消耗的CPU时间。
#+END_QUOTE

我怀疑这个功能已经废弃了。

*** clone()

~clone()~ 主要用于线程库的实现。

#+BEGIN_QUOTE
如同fork()，由clone()创建的新进程几近于父进程的翻版。

但与fork()不同的是，克隆生成的子进程继续运行时不以调用处为起点，转而去调用以参数func所指定的函数，func又称为子函数（childfunction）。

因为克隆产生的子进程可能（类似vfork()）共享父进程的内存，所以它不能使用父进程的栈。相反，调用者必须分配一块大小适中的内存空间供子进程的栈使用，同时将这块内存的指针置于参数child_stack中。

#+END_QUOTE

好讨厌这种传入 int* 然后在程序里面修改这个指针对应的值的做法啊。

#+BEGIN_SRC c
#define _GNU_SOURCE
#include <signal.h>
#include <sys/wait.h>
#include <fcntl.h>
#include <sched.h>
#include <stdlib.h>
#include <stdio.h>
#include <errno.h>


#ifndef CHILD_SIG
#define CHILD_SIG SIGUSR1
#endif

static void errExit(const char* msg) {
  printf(msg);
  _exit(-1);
}

static int childFunc(void *args) {
  if (close(*((int *) args)) == -1 ) { // 1
    errExit("close");
  }
  return 0;
}

int main(int argc, char* argv[]) {
  const int STACK_SIZE = 65536;
  char *stack;
  char *stackTop;
  int s, fd, flags;

  fd = open("/dev/null", O_RDWR); // 2
  if (fd == -1)
    errExit("open");

  flags = (argc > 1) ? CLONE_FILES : 0; // 3

  stack = malloc(STACK_SIZE); // 4
  if (stack == NULL)
    errExit("malloc");

  stackTop = stack + STACK_SIZE;

  if (CHILD_SIG != 0 && CHILD_SIG != SIGCHLD) // 5
    if (signal(CHILD_SIG, SIG_IGN) == SIG_ERR)
      errExit("signal");

  if (clone(childFunc, stackTop, flags | CHILD_SIG, (void *) &fd) == -1) // 6
    errExit("clone");

  if (waitpid(-1, NULL, (CHILD_SIG != SIGCHLD) ? __WCLONE : 0) == -1) // 7
    errExit("waitpid");
  printf("child has terminated\n");

  s = write(fd, "x", 1); // 8
  if (s == -1 && errno == 9)
    printf("file descriptor %d has been closed\n", fd);
  else if (s == -1)
    printf("write() on file descriptor %d failed, errno: %d", fd, errno);
  else
    printf("write() on file descriptor %d succeeded\n", fd);

  exit(0);
}
#+END_SRC

**** clone() 的 flags 参数

#+BEGIN_QUOTE
这里需要指出，某种意义上，对术语“线程”和“进程”的区分不过是在玩弄文字游戏而已。引入术语“内核调度实体（KSE，kernel schedul ingentity）”（某些教科书以之来指代内核调度器所处理的对象）的概念对解释这一点会有所助益。实际上，线程和进程都是KSE，只是与其他KSE之间对属性（虚拟内存、打开文件描述符、对信号的处置、进程ID等）的共享程度不同。针对线程间属性共享的方案不少，POSIX线程规范只是其中之一。
#+END_QUOTE

进程与线程之间的区别非常模糊。调用 ~clone()~ 生成进程时，可以通过 flags 控制共享一些属性， POSIX 标准要求某些资源必须共享。

1. POSIX 线程要求所有的线程共享相同的打开文件描述符，即 CLONE_FILES 要打开；
2. CLONE_FS 要打开，以共享系统相关信息；
3. CLONE_SIGHAND 要打开，以共享信号处理设置；
4. CLONE_VM: 共享虚拟内存；
5. POSIX标准规定，进程的所有线程共享同一进程ID；
6. 当一个设置了CLONE_THREAD的线程终止时，并没有信号会发送给该线程的创建者（即调用clone()创建终止线程的线程）。相应的，也不可能调用wait()（或类似函数）来等待一个以CLONE_THREAD标志创建的线程。这与POSIX的要求一致。POSIX线程与进程不同，不能使用wait()等待，相反，必须调用pthread_join()来加入；

*** 进程创建的速度

*** exec() 和 fork() 对进程属性的影响

这个表太大了。

