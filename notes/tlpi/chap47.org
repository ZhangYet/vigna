** System V 信号量

#+BEGIN_QUOTE
当减小一个信号量的值时，内核会将所有试图将信号量值降低到0之下的操作阻塞。类似的，如果信号量的当前值不为0，那么等待信号量的值等于0的调用进程将会发生阻塞。

[德]Michael Kerrisk. Linux/UNIX系统编程手册(上、下册) (Chinese Edition) (Kindle 位置 17252-17253). Kindle 版本. 
#+END_QUOTE

有够复杂的。所以降低到等于0的操作应该是不会被阻塞的吧。总的来说，需要维护信号量的值大于等于0。

*** 概述

*** 创建或获取信号量

真的复杂，创建的时候可以创建多个信号量。依然是用标识符标识的。

*** 信号量相关操作

也是增删改查。

*** 信号量关联结构

这个倒是比队列简单，只有一个 ipc_perm 结构（权限相关），两个时间戳，和一个表示信号量本身的 long int.

*** 信号量初始化

~semget()~ 在标准中不负责信号量的初始化，但是 Linux 实现中可能会用它来初始化为0，但是为了可移植性，不应该依赖这种特性。但是这样可能会带来竞态条件（因为创建和初始化是两个步骤）。

避免这种那个情况的方法是等 sem_otime 变成非0（说明它被初始化过了）。好简陋的手法。

*** 操作信号量

sem_num 决定了在哪个信号量上操作。

sem_op 决定了具体要做什么操作。

| op    | 权限 | 影响                                                                                                         |
|-------+------+--------------------------------------------------------------------------------------------------------------|
| 大于0 | 写   | 其他等待减少的信号量可能会被唤醒                                                                             |
| 等于0 | 读   | 如果当前信号量等于0，马上结束，否则阻塞到等于0为止。                                                         |
| 小于0 | 写   | 如果当前信号量小于0，减去 sem_op 的值，如果大于0，且绝对值大于等于 sem_op 的绝对值，那就马上结束，否则阻塞。 |

真复杂。

#+BEGIN_QUOTE
从语义上来讲，增加信号量值对应于使一种资源变得可用以便其他进程可以使用它，而减小信号量值则对应于预留（互斥地）进程需使用的资源。在减小一个信号量值时，如果信号量的值太低——即其他一些进程已经预留了这个资源——那么操作就会被阻塞。

[德]Michael Kerrisk. Linux/UNIX系统编程手册(上、下册) (Chinese Edition) (Kindle 位置 17419-17421). Kindle 版本. 
#+END_QUOTE

不过这样一说还挺简单的。

#+BEGIN_QUOTE
可以通过一个semop()调用在一个集合中的多个信号量上执行操作。这里需要指出的关键一点是这组操作的执行是原子的，即semop()要么立即执行所有操作，要么就阻塞直到能够同时执行所有操作。

[德]Michael Kerrisk. Linux/UNIX系统编程手册(上、下册) (Chinese Edition) (Kindle 位置 17428-17429). Kindle 版本. 
#+END_QUOTE

*** 多个阻塞信号量的处理

如果多个进程因为要减去信号量而被阻塞，在需要减去的值相同的情况，哪个进程先执行是看系统内核调度的。

如果要减去的值不同，那么会优先响应已经满足需求的进程。

要考虑因信号量被阻塞而被饿死的情况。

另外，假如减去的值不同但是有个信号量释放了一个超大的值，然后所有进程都满足的情况下，有没有优先级？

*** 信号量撤销量

为了防止进程调整完信号量终止了，我们需要信号量撤销。

#+BEGIN_QUOTE
为避免这种问题的发生，在通过semop()修改一个信号量值时可以使用SEM_UNDO标记。当指定这个标记时，内核会记录信号量操作的效果，然后在进程终止时撤销这个操作。不管进程是正常终止还是非正常终止，撤销操作都会发生。

[德]Michael Kerrisk. Linux/UNIX系统编程手册(上、下册) (Chinese Edition) (Kindle 位置 17520-17522). Kindle 版本. 
#+END_QUOTE

*** 二元信号量协议

其实就是只有「可用」和「不可用」两种状态的信号量（是不是特别像互斥锁）。

*** 信号量限制

*** 信号量的缺点

1. 标识符，这就跟队列一样了。
2. 创建和初始化需要两步，存在竞态条件的风险。
3. 内核也不维护信号量的计数，安全删除信号量是个问题。
4. 接口复杂（对）。
5. 操作限制多。

