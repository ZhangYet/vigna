#+TITLE: Dante 的 C++ 学习笔记
#+OPTIONS: ^:nil
#+HTML_HEAD: <link rel="stylesheet" href="https://latex.now.sh/style.css">
* pragma once
关于 pragma 见[[https://docs.microsoft.com/en-us/cpp/preprocessor/pragma-directives-and-the-pragma-keyword?view=msvc-160][微软的文档]]，它用来指定编译器特性。

`#pragma once` 跟 the include guard idiom （就是 ifndef define endif 那一套）作用相似，保证只会被 include 一次。
* C++ 的类继承
#+BEGIN_QUOTE
public公有继承：基类的非私有成员的访问属性在派生类中保持不变，派生类可以防问基类公有的和保护的部份

private私有继承：基类的非私有成员的访问属性在派生类变成私有成员，私有继承一般使用较少

protected保护继承：基类的非私有成员的访问属性在派生类变成保护成员
#+END_QUOTE

*不管如何继承基类，基类中的私有成员都是无法访问。*
* using keyword
C++ 11 里面，可以用 `using` 做 type alias, 见 [[https://en.cppreference.com/w/cpp/language/type_alias][cppreference]].
* explicit keyword
用在构造函数里面，则该构造函数无法隐式转换，也无法 copy-initialization, 见 [[https://en.cppreference.com/w/cpp/language/explicit][cppreference]].
* 使用 socket 的标准流程
* 使用 epoll 的标准流程
三步走：

1. create: 创建 epoll 实例；
2. 将需要关注的 fd 加到 epoll 列表里面；
3. wait 到有 fd 就绪；

感觉只需要关注 accept 之后的 fd 就行了？

看了[[https://github.com/NerDante/epollServer][这个例子]]，并不需要创建多个 tcp socket

感觉我们就假设 client 只需要每次上传的时候连一次 server 就行了。

参考 [[https://github.com/caozhiyi/CppNet.git][CppNet]] 吧。
* gtest 使用入门
见[[http://senlinzhan.github.io/2017/10/08/gtest/][这篇博文]]。
* std::move
生成右值引用，这样可以省下复制。
* std::bind
跟 python 的 partial 差不多。
* share_from_this()
see also: [[https://en.cppreference.com/w/cpp/memory/enable_shared_from_this/shared_from_this][doc]]
* CppNet 笔记
~SendFile~ 类有一个 ~CppNet~ 实例，所有的发送都通过这个实例实现。初始化的时候，状态是 ~hello~, 收到 Server 的 "OK" 之后，转为 ~sending~ 再次收到 "OK" 转为成功。

猜测一下，就是先 ~OnConnect~ 发送 header，然后等 ~OnRecv~ 被调用。
** Client 
*** 创建 CppNet 实例
没啥好说的。
*** 用 CppNet 实例初始化 SendFile 实例
也没啥好说的。
*** net 实例初始化
这里会创建一个 CppNetBase （一个 shared_ptr）.

然后 CppNetBase 会按照 thread 数目初始化 Dispatcher (其实就是用 [[*share_from_this()][share_from_this()]] 创建 dispatcher 指针然后保存进一个 vector 里面，之后可以随机选 dispater).
*** set callback
除了 [[*std::bind][std::bind]] 没啥好说的。
*** Connetion
其实是 CppNetBase 会做 ~Connection~. 这其实就是随机找一个 Dispatcher 让它做 connection。Dispatcher 会让 sock 来做连接，这里关于线程的一些内容不太懂。

