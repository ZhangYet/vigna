** Common Programming Concepts
   :PROPERTIES:
   :UNNUMBERED: t
   :END:

*** 变量与可变性

rust 中的变量默认是不可变的（这跟变量这个名字其实矛盾跟了），除非声明的时候加上 `mut` 如下：

#+BEGIN_SRC rust
let mut number = 6;
#+END_SRC

不可变变量跟常量是有区别的：

1. 常量是绝对不可变的。
2. 常量可以定义在任意 scope。
3. 常量只接受常量表达式。

*shadowing*

#+BEGIN_SRC rust
fn main() {
    let x = 5;

    let x = x + 1;

    let x = x * 2;

    println!("The value of x is: {}", x);
}
#+END_SRC

上面这个例子，x 并没有被改变，它 shadowed 了，其实后面的 x 是新的 x（因为前面有 `let` 关键词啊）。

所以 rust 允许我们 shadow 一个名字相同但是其他性质完全不同的变量，非常幺蛾子。

*** 数据类型

rust 是静态类型的语言。

四种基本类型：
1. 整型；
2. 浮点数；
3. boolean；
4. char；

复合类型[fn:1]：
1. Tuple；
2. Array;

*** 函数

rust 的函数定义没啥特别的。

*** 控制流

`if` 条件部分不需要括号。因为 `if` 是表达式，所以可以这样写：

#+BEGIN_SRC rust
fn main() {
    let condition = true;
    let number = if condition {
        5
    } else {
        6
    };

    println!("The value of number is: {}", number);
}
#+END_SRC
但是记住，`if` 和 `else` 部分的类型要匹配。

`loop` 无条件循环，但它也是可以返回值的！

#+BEGIN_SRC rust
fn main() {
    let mut counter = 0;

    let result = loop {
        counter += 1;

        if counter == 10 {
            break counter * 2;
        }
    };

    println!("The result is {}", result);
}
#+END_SRC

`while` 循环与 `for` 循环，这两个循环就比较中规中矩了， `for` 迭代的时候用的是 in。

*** Footnotes

[fn:1] 居然只有两种！
 
