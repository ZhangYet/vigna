* [[https://book.douban.com/subject/25809330/][Linux/UNIX系统编程手册]]                                            :reading:

** 历史和标准

** 基本概念

** 系统编程概念

*** 系统调用

    1. 系统调用将处理器从用户态切换为核心态；
    2. 系统调用的组成是固定的，有唯一的、对外不可见的数字标识；
    3. 每个系统调用都有参数规范用户空间与内核空间之间的信息传递；

       某种意义上来说，C 函数中系统调用相关的函数，都是 wrapper，它们封装了对应的系统调用，使用这些函数的时候，会有两次次用户态跟核心态的切换。

*** 库函数

*** glibc

    1. 可以用 ldd 列出依赖的库；[fn:6]

*** 错误处理

    少数系统调用(比如 [[http://man7.org/linux/man-pages/man2/getpriority.2.html][getpriority()]] )调用成功也会返回 -1。

*** 可移植性问题

**** 特性测试宏

     通过定义特性测试宏，暴露对应特定标准的定义。

**** 系统数据类型

*** 练习

    =reboot= 第二个参数的 magic 数值转换成十六进制之后，其实就是 Linus 和他女儿的生日，见[[https://stackoverflow.com/questions/4808748/magic-numbers-of-the-linux-reboot-system-call][这个回答]]。


** 文件 I/O

*** =open()=

    1. 因为早期的 UNIX 实现，使用 0、1和2表示 =O_RDONLY=, =O_WRONLY= 和 =O_RDWR= 所以， =O_RDWR= 不等于 =O_RDONLY | O_WRONLY=[fn:1]。
    2. 新建文件的权限会依赖于 =open()= 的参数 mode 以及进程的 umask 值和父目录的默认访问控制列表。

*** =read()=

    1. =read()= 读取的字节数少于请求的字节数的情况：靠近 **普通文件** 尾部；管道、FIFO、socket 或者终端。
    2. C 语言里面调用 =read()= 还得手动加 ='\0= 。

*** =write()=

    1. 对磁盘文件执行 I/O 操作时， =write()= 成功并不能确保数据已经写入磁盘。因为内核会缓存磁盘的 I/O 操作。

*** =close()=
    
    1. 关闭文件可能的错误：关闭未打开或者已经关闭的文件。

*** =lseek()= 改变文件偏移量

    1. 并不适用于所有文件（如管道、FIFO、socket或者终端）。
    2. =lseek()= 之后再写入，可以导致文件空洞

*** 练习

    1. 写一个 tee
    2. 复制时带空洞


** 深入探究文件 I/O

*** 原子操作和竞争条件

    1. 多进程情况下，使用 =O_CREAT= 会有竞态问题，所以加了 =O_EXCL= 这个标志位，检查文件存在和创建文件会成为一个原子操作，同理 =O_APPEND= 支持向文件尾部追加数据的原子操作。

*** 文件描述符和打开文件之间的关系

    内核维护了三个文件结构：

    1. 进程级的文件描述符表：记录了控制文件描述符操作的一组标志，对打开文件句柄的引用；
    2. 系统级的打开文件表：记录了打开文件句柄，记录了文件的偏移量、状态标志、访问模式、与信号驱动I/O相关的设置对该文件 i-node 对象的引用[fn:2]
    3. 文件系统建立的 i-node 表：记录了文件类型、记录了所有锁的指针以及文件各种属性；

    两个不同的文件描述符（进程级）指向同一个文件句柄，将共享同一个文件偏移量，无论这个两个描述符是否属于相同的进程。但文件描述符标志为进程私有，进程间互不影响。 *注意，重复打开一个文件可能获取到不同的文件句柄。*

*** =/dev/fd= 目录

    这个目录下每个文件对应打开文件描述符。 =/dev/fd/0=, =/dev/fd/1= 和 =/dev/fd/2= 对应标准输入、标准输出和标准错误。

*** 练习
    
    1. 5-2 用 =O_APPEND= 打开文件，并将文件偏移量置于文件起始处，写入数据；
    2. atomic_append[fn:3]

** 进程
    
*** 进程与程序

    *进程是内核定义的抽象实体，该实体分配用以执行程序的各项系统资源。从内核角度，进程由用户内存空间（包含了程序代码和变量）与内核数据结构（维护进程状态信息）组成。*

*** 进程内存布局

    每个进程分配的内存有以下几个部分：
    1. 文本段，包含了进程运行的程序机器语言指令，可以设为共享（多个进程运行同一程序）；
    2. 初始化数据段，包含显式初始化的全局变量和静态变量。亦称用户初始化数据段；
    3. 未初始化数据段包含未进行显式初始化的全局变量和静态变量，程序启动时会把这些变量初始化为0。[fn:4] 亦称零初始化数据段；
    4. 栈，当前调用的函数会被分配一个栈帧，栈帧中存储了函数的局部变量、实参和返回值[fn:5]；
    5. 堆，可以动态分配内存的一块区域；

*** 虚拟内存管理

    *内核为每个进程维护一张页表，描述每页在进程虚拟地址空间中的位置，页表中每个条目要么指向一个页面在 RAM 中的位置，要么致命它驻留在磁盘。*

*** 命令行参数

    1. 一种小技巧：用 =argv[0]= 也就是程序名决定程序要执行的操作，比如 =gzip=, =gunzip= 这几个程序[fn:7]；
    2. 不考虑可移植性，可以通过 =/proc/PID/cmdline= 读取进程的命令行参数，GNU C 库还提供了 =program_invocation_name= 和 =program_invocation_short_name= 获取程序名；

*** 环境列表

    1. 可以通过全局变量 =char **environ= 访问环境列表（亲测有效），另外， =main()= 也可以通过第三个参数 =char *envp[]= 获取环境变量——但这不是 SUSv3 标准；
    2. 环境变量也是一种进程间通信的方式：子进程会从父进程继承；

*** 非局部跳转: =setjmp()= 和 =longjmp()= 

    这两个函数可以让你在不同的函数之间跳转，混乱代码必备神器。

    貌似作用是 =longjmp()= 执行之后，控制跳转到 =setjmp()= 那里， =setjmp()= 的返回值决定是哪个 =longjmp()= 返回的。

*** 练习

    1. =longjmp()= 到一个已经返回的函数。思路是 =setjmp()= 在函数 A， =longjmp()= 在函数 B， A 调用完了再调用 B。

** 内存分配

*** 在堆上分配内存

**** =brk()= 与 =sbrk()=

     可以通过改变程序的 program break (program break 最初在在未初始化数据段末尾之后)改变堆的大小。 =brk()= 会将 program break 设置到制定位置， =sbrk()= 会增量改变 program break 的位置并把旧的位置返回。 =sbrk(0)= 会返回当前的 problem break。

**** =malloc()= 与 =free()=

     一般情况下， =free()= 并不降低 program break 位置，而是将对应内存添加到空闲内存列表中，但是 glibc 实现会在释放内存的时候将相邻的空闲内存合并成一整块更大的内存（这个时候有可能改变 program break）。

**** =malloc()= 与 =free()= 的实现

     1. =malloc()= 先扫描 =free()= 释放的空闲内存块列表，寻找尺寸大于或者等于要求的一块空闲内存。如果空闲内存比较大，会对其进行分割，将较小的那块留在空闲列表。如果空闲内存列表找不到足够大的空闲内存块，调用 =sbrk()= 分配更多的内存。
     2. =free()= 的实现比较有趣但是复杂，我不想做笔记了。

** 用户和组

** 进程凭证

*** 实际用户 ID 和实际组 ID

    登录时候的 ID 和组 ID

*** 有效用户 ID 和有效组 ID[fn:8]

    有效用户 ID 和有效组 ID 加上辅助组 ID 决定了进程权限。一般来说有效用户（组） ID 跟实际用户（组） ID 是一致的。但是有些时候不同，详细见下。

*** Set-User-ID 和 Set-Group-ID 

   set-user-id 程序会将进程的有效用户 ID 置为可执行文件的用户 ID （即文件 owner 的 ID），从而获得对应的权限。即用户可以获得文件 owner 对应的权限。

*** saved set-user-ID 和 saved set-group-ID

    这里的翻译非常糟糕，概念完全混淆了。

*** 文件系统用户 ID 和组 ID

    历史遗留问题，跳过。

*** 获取和修改进程凭证

** 时间

** 系统限制和选项

** 系统和进程消息

*** =/proc= 文件系统

    =/proc= 是一个虚拟的文件系统，包含了各种用于展示内核信息的文件，它并未存储在磁盘上，而是由内核在进程访问此类信息时动态创建[fn:9]。

*** 练习
    
    这一章的三个练习都值得一做。

** 文件 I/O 缓存

*** 缓冲区高速缓存

    =read()= 和 =write()= 并不会直接发起磁盘访问，都是先从高速缓存读/写进高速缓存。

    缓冲区大小对 I/O 程序性能有影响：缓冲区越大，发起 =read()= 和 =write()= 的次数越少，但是大到一定程度，在用户空间和内核空间之间复制数据和执行实际 I/O 比执行 =read()= 和 =write()= 的成本高得多。

*** stdio 库的缓冲


** Footnotes

[fn:9] 但为什么要动态创建？内核直接返回不就好了。 

[fn:8] 所以我觉得有效用户 ID 应该翻译为生效用户 ID。 

[fn:7] 这其实就是用程序名作为一个参数嘛。 

[fn:6] 周末（09-21）还学到了用 [[https://linux.die.net/man/1/locate][locate]] 查头文件对应的位置。 

[fn:5] 忽然就好好奇闭包是怎样处理的。 

[fn:4] 这就是本章后面习题6-1的答案：程序清单6-1中的静态变量位于未初始化数据段，所以不会在磁盘分配存储空间，而是在程序初始化的时候分配内存空间。 

[fn:3] 做成大小不一样的原因，是因为没有使用 O_APPEND 的时候，两个进程会使用相同的偏移量，一个进程会把另一个进程写的内容覆盖掉。 

[fn:2] 其实都叫文件描述符多好，非得加一个文件句柄。

[fn:1] 所以别乱用 
