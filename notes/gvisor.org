#+TITLE: gVisor 文档阅读笔记
#+OPTIONS: ^:nil
#+OPTIONS: num:nil
#+HTML_HEAD: <link rel="stylesheet" href="https://latex.now.sh/style.css">
* What is gVisor
** [[https://github.com/opencontainers/runtime-spec/blob/master/spec.md][OCI Runtime Spec]]
*** 五原则
*** Filesystem Bundle
#+BEGIN_EXAMPLE
a filesystem bundle - a set of files organized in a certain way, and containing all the necessary data and metadata for any compliant runtime to perform all standard operations against it
#+END_EXAMPLE

1. [[https://github.com/opencontainers/runtime-spec/blob/master/config.md][config.json]] *必须* 有且 *必须* 命名为 config.json ， *必须* 位于 bundle 的根目录。
2. container's root filesystem: 其实就是 config.json 里面 `root.path` 指定的 dir。
*** [[https://github.com/opencontainers/runtime-spec/blob/master/runtime.md][Runtime and lifecycle]]
runtime *必须* 能执行标准 operation，它需要维护一个在标准 operation 下转移的状态机。
**** state 
每个 runtime 的 state 包含如下字段

| property    | value             | desc                            | required       |
| ociVersion  | string            | 就是 OCI runtime spec 的版本号  | Y              |
| id          | string            | 在当前 host 上唯一的 id         | Y              |
| status      | enum string[fn:1] | 后面 lifecycle 章节，这个是重点 | Y              |
| pid         | int               | 进程号                          | 依赖平台和状态 |
| bundle      | string            | bundle dir                      | Y              |
| annotations | string            |                                 | N              | 

可以增加其他字段。
**** lifecycle
定义了标准的 opertion 以及整个流程（opertion 调用的次序以及错误处理，有若干个 opertion 出错只需要 warning 即可，另外还有调用 hook 的时机）。
*** config
config 里面的内容实在太多。只记录了一部分明确看过又不太懂的地方。
**** ociVersion
版本号没啥好说的。
**** root
指定 root filesystem, 大部分平台都是 required。 可以是绝对路径也可以是相对路径。
**** mounts
array。runtime *必须* 按列表次序挂载。更多细节见[[https://man7.org/linux/man-pages/man2/mount.2.html][ mount(2)]] 和 [[https://man7.org/linux/man-pages/man8/mount.8.html][mount(8)]].
**** process
***** rlimits (POSIX process 相关)
resource limit 资源限制的配置，具体内容见 [[https://man7.org/linux/man-pages/man2/getrlimit.2.html][getlimit2]] [fn:2] 和 [[https://pubs.opengroup.org/onlinepubs/9699919799/functions/getrlimit.html][getlimit3]]

没有对网络资源的限制。

***** apparmorProfile (Linux process 相关)
见 [[https://wiki.ubuntu.com/AppArmor][AppArmor 文档]]，这是一门 MAC 技术，具体来说，它支持配置程序对哪些目录有哪些权限。

***** capabilities (Linux process 相关)
这是关于权限的设置项。具体的权限见 [[https://man7.org/linux/man-pages/man7/capabilities.7.html][capabilities]]。

***** seLinuxLable (Linux process 相关)

**** User

这里的 uid 和 gid 都是 [[https://man7.org/linux/man-pages/man7/namespaces.7.html][namespace]] 意义下的。

* clone 
39-46: 单纯的 flag 检查

47-53： PID namespace 的检查

57: cannot span user namespace

61: ExitSignal 合法性检查

67: ~PullFullState()~ 但实际这个函数啥都没有干。

74-93: 从 ~t.Credentials()~ 中创建 ChildUserNameSpace 并检查 Capability。

95-100: 将 user namespace 复制到 UTSNamespace。

102-107: 新建 IPCNamespace 或者增加它的引用数。

108-111: defer 一个 cleanup 对象，它会减少 IPCNamespace 的引用。

113-116: 如果有必要的话，新建 NetworkNamespace。

119-125: 增加 mountNamespace 的引用数，并 defer 一个减少引用的 cleanup。

127-143: fork 出 image，defer 中 release 这个 image， ~SetReturn()~ 是要干什么？

145-151: fork 新的 FSContext 或者增加它的引用数。

153-159: fork 新的 FDTable 或者增加它的引用数。

161-166: 处理 pid namespace。

168-183: 处理 threadgroup。

185-208: 组装 TaskConfig。

209-215: NewTask。

222-224: SetSignalStack。

226-232: usens != creds.UserNamespace 的处理（但是我不清楚处理了什么）。

236-238: get tid。

243-246: store bpf 相关 filter .

247-249: set vforkParent .

251-253: set clear tid.

254-257: 处理 CLONE_CHILD_SETTID.

258-261: get ntid.

263-278: 并不知道干了啥的扫尾工作。

279 返回 ntid

需要搞清楚这些 flag 和 namespace 的含义。
* Footnotes

[fn:2] [[https://man7.org/linux/man-pages/man2/nice.2.html][nice]] 是什么我都忘记了。 

[fn:1] 可选值包括 creating, created, running, stopped 可以增加更多的状态，但是不能跟已有状态重合。 
