* [[https://book.douban.com/subject/34262228/][深入理解Python特性]]

** notes

*** python 整洁之道

**** 断言[fn:1]

     1. [[https://en.wikipedia.org/wiki/Heisenbug][Heisenbug]];
     2. 因为当 [[https://docs.python.org/3/library/constants.html#__debug__][内置变量 =__debug__=]] 为 =False= 时， =assert= 会被禁用，所以不应该用 =assert= 作为生产环境中的数据校验手段;
     3. 如果将非空元组传给 =assert= ，则 =assert= 永远为真;

**** 逗号

     1. [[https://docs.python.org/3/reference/lexical_analysis.html#string-literal-concatenation][String literal concatenation]] 以及与之相关的 [[https://stackoverflow.com/questions/34174539/python-string-literal-concatenation][stackoverflow Q&A]];
     2. 列表中分拆成多行，每行以逗号结尾的好处——改动容易在 VCS 中看见；避免不小心的 string literal concatenation;

**** 变量名中的下划线

     1. 使用 =from package import *= 的时候，以单下滑线开头的名字(如 =_var=)不会被导入。 详见[[https://docs.python.org/3/tutorial/modules.html#importing-from-a-package][文档]];
     2. Python 社区中将双下划线称为 dunder;
     3. 以 dunder 开头的变量名/方法名，会被 name mangling，用 =dir()= 查看对象属性的时候，会看见对应的变量名/方法名被改写了，这是为了避免这些变量/方法被子类覆盖;
     4. 前后都有 dunder 的变量/方法不会被改写名称[fn:2];

**** 字符串格式化

     1. 使用模板字符串避免安全问题，其余情况尽量使用 [[https://docs.python.org/3/whatsnew/3.6.html#whatsnew36-pep498][Formatted string literals]] ;

*** 高效的函数

*** 类与面向对象

**** 对象比较

     其实比较 =is= 和 ==== ，还有一点需要补充：[[https://docs.python.org/3/c-api/memory.html][Python 内存管理]]，以及如下例子：

#+NAME: <name>
#+BEGIN_SRC python
t = 256
s = 256
t is s # True

t = 257
s = 257
t is s # False
#+END_SRC


**** 浅拷贝与审拷贝

**** nametuple

**** 类变量
     
     **类变量** 的改变会影响所有实例。当然对实例修改类变量的话，会在该实例那里生成一个实例变量覆盖类变量——然后类变量可以通过 =instance.__class__.var_name= 访问。

**** 实例方法、类方法和静态方法

     1. 实例方法可以通过 =self.__class__= 访问类本身，即实例方法也可以修改类的状态；
     2. 类方法无法修改对象实例状态；
     3. 静态方法不能修改对象状态和类状态；
     4. 类方法可以用来实现工厂模式；

*** Python 中常见的数据结构

*** 循环和迭代

**** 迭代器

     **在迭代器协议中，最重要的是 =__iter__= 要返回带有 =__next__= 方法的对象** 。

**** 生成器表达式和迭代器链

*** 字典

#+NAME: <name>
#+BEGIN_SRC python
{True: 'yes', 1: 'no', 1.0: 'maybe'} # 至少在 3.6.4 输出结果仍然是 {True: 'maybe'}
#+END_SRC

这段代码奇怪的结果是因为在字典中 =True=, =1= 和 =1.0= 是相同的 key 值。这意味着这三个值的值相等，hash 也相同[fn:3]。


*** Python 式高级技巧

使用 [[https://docs.python.org/3/library/dis.html][dis]] 来探索 python 的字节码。

**** further reading: [[https://book.douban.com/subject/5416853/][Compiler Design]]




** Footnotes

[fn:3] 作者在这里验证的思路挺不错的，可以借鉴。 

[fn:2] 这都什么鬼。。。 

[fn:1] 老实说，断言这么麻烦，用来干啥。

