** 线程：更多细节

*** 线程栈

#+BEGIN_QUOTE
创建线程时，每个线程都有一个属于自己的线程栈，且大小固定。

[德]Michael Kerrisk. Linux/UNIX系统编程手册(上、下册) (Chinese Edition) (Kindle 位置 12226-12227). Kindle 版本. 
#+END_QUOTE

线程栈的大小可以设置。

*** 线程与信号

太复杂了，跳过。

*** 线程与进程控制

**** exec()

线程调用了 ~exec()~ 之后调用程序会被替换，除了调用的线程之外，其他的线程都会消失。调用线程 ID 变得不确定。

**** fork()

调用线程会复制到子进程中，其他线程会消失。太复杂了。

**** exit()
#+BEGIN_QUOTE
如果任何线程调用了exit()，或者主线程执行了return，那么所有线程都将消失，也不会执行线程特有数据的解构函数以及清理函数。

[德]Michael Kerrisk. Linux/UNIX系统编程手册(上、下册) (Chinese Edition) (Kindle 位置 12344-12345). Kindle 版本. 
#+END_QUOTE

这么复杂还调用些啥啊。

*** 线程实现模型

**** M:1 实现（用户级线程）

#+BEGIN_QUOTE
在M:1线程实现中，关乎线程创建、调度以及同步（互斥量的锁定，条件变量的等待等）的所有细节全部由进程内用户空间（userspace）的线程库来处理。对于进程中存在的多个线程，内核一无所知。

[德]Michael Kerrisk. Linux/UNIX系统编程手册(上、下册) (Chinese Edition) (Kindle 位置 12350-12351). Kindle 版本. 
#+END_QUOTE

优点不多，缺陷一堆：

1. 系统调用时，控制由用户空间转交给内核。如果系统调用被阻塞，所有线程都会被阻塞。
2. 内核无法调度这些线程。

**** 1:1 实现（内核级线程）

#+BEGIN_QUOTE
在1:1线程实现中，每一线程映射一个单独的KSE。内核分别对每个线程做调度处理。线程同步操作通过内核系统调用实现。

[德]Michael Kerrisk. Linux/UNIX系统编程手册(上、下册) (Chinese Edition) (Kindle 位置 12359-12360). Kindle 版本. 
#+END_QUOTE

**** M:N 实现（两级模型）

*** Linux POSIX 线程实现

现在我们都是基于 NPTL 线程实现。

**** Linux Threads

没必要看了，这里主要是说 Linux Threads 跟标准不一致的地方。

**** NPTL

基本实现：

1. 使用 ~clone()~ 创建，并且使用9个标志（至于是哪些，自己查吧）[fn:1]。
2. 实现的内部使用前两个实时信号。
3. NPTL 不需要管理线程。

可以使用 ~getconf GNU_LIBPTHREAD_VERSION~ 查看具体的线程库版本。


*** Footnotes

[fn:1] 可以使用 ~ps -L~ 查看线程信息。
