** 内部实现

*** 架构

1. The k8s control plane
   1. etcd
   2. The API server
   3. The Scheduler
   4. The Controller Manager

2. The worker  nodes
   1. The Kubelet
   2. The k8s Service Proxy
   3. The Container Runtime

3. Add-on
   1. The k8s DNS server
   2. The Dashboard
   3. An Ingress Controller
   4. Heapster
   5. The Container Network Interface network plugin 

*其他组件只跟 API server 通信*。

API server 和 etcd 可以多实例，但是 scheduler 和 controller 只能有一个。

Controll plane 的组件和 proxy 通常可以用 pod 来跑。kubelet 就得作为服务组件了（所以 Master 节点也会跑一个 kubelet）。

*只有 API server 直接读写 etcd*。

#+BEGIN_QUOTE
 This brings a few benefits, among them a more robust optimistic locking system as well as validation; and, by abstracting away the actual storage mechanism from all the other components, it’s much simpler to replace it in the future. It’s worth emphasizing that etcd is the only place Kubernetes stores cluster state and metadata.
#+END_QUOTE

API server 的工作：

1. 认证；
2. 鉴权（如果是写请求）；
3. 通知资源变化（通过一个流）， 比如 ~kubectl get pods --watch~ ；

scheduler 也不会直接创建 pod ， 它只是通知 API server，让 API server 通知 kubelet. scheduler 支持多种可定制的分配策略。

controller manager 包含各种资源的 controller，它们都会跟 server 通信，watch 资源的变化。

controller 的源代码在： https://github.com/kubernetes/kubernetes/blob/master/pkg/controller. 主要的结构体有两个：

1. Informer： 监听资源变化
2. worker： 干活的方法

kubelet 的工作：

1. 注册节点，往 API server 注册一个 node resource
2. 监听 pod 信息，创建 pod
3. 监听容器状态， 管理容器生命周期

最强的地方在于它可以用本地 pod 配置文件跑起 static pod: 这就是 kubernetes 可以 boostrap 的原因了。

*** 展现一个流程：部署一个 Deployment
原书的 Figure 11.12 描述得很完美了。

*** what a pod is?
就算你的 pod 只有一个 container ， 你的 pod 也不知一个 container, 至少还有一个 pause container，这个 container 跟 pod 同生共死。这个 container 用来 hold （鬼知道怎样翻译）整个 pod 的 namespace 的。

*** 网络
kubernetes 自己并不设置网络，要么 SA 设置，要么通过 CNI 设置。每个 pod 自己感知到的 ip 和别的 pod 感知到是一样的，没有中间商（NAT）。

为了让不同节点的 pod 互通，所以需要引入 SDN。

*** service 实现
#+BEGIN_QUOTE
Everything related to Services is handled by the kube-proxy process running on each node.
#+END_QUOTE

kube-proxy 的原理还是挺简单的嘛。

*** 高可用
*Q: What if the servers running the Kubernetes Control Plane components go down?*

A: etcd 多实例集群。API server 也可以多实例。Controller 和 Scheduler 起多实例但只启用一个。

*Q: 多个 Controller 和 Scheduler 怎么选主？*

A: 通过乐观锁创建 Endpoint 资源，谁抢到谁就是主。主会定时更新资源，keep alive，一旦失败，其他资源再尝试成为主。
