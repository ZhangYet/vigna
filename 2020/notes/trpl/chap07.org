** Managing Growing Projects with Packages, Crates, and Modules
   :PROPERTIES:
   :UNNUMBERED: t
   :END:

*** Packages and crates

rust 支持两种 crates：

1. library crate : 最多只能有一个，入口是 src/lib.rs.
2. binary crate : 可以有多个，默认入口是 src/main.rs.

*** Modules

作为入口的 crate，实际上就是一个根节点：

#+BEGIN_SRC rust
mod front_of_house {
    mod hosting {
        fn add_to_waitlist() {}

        fn seat_at_table() {}
    }

    mod serving {
        fn take_order() {}

        fn serve_order() {}

        fn take_payment() {}
    }
}
#+END_SRC

当我们在 src/lib.rs 或者 src/main.rs 定义如上的 module 时，我们其实定义了如下的一个 module 树：

#+BEGIN_SRC
crate
 └── front_of_house
     ├── hosting
     │   ├── add_to_waitlist
     │   └── seat_at_table
     └── serving
         ├── take_order
         ├── serve_order
         └── take_payment
#+END_SRC

*** Paths

path 可以是绝对的（从 crate 也就是根开始），也可以是相对的。

另外要注意，默认 modules 下所有东西都是私有的。除非我们通过 ~pub~ 关键词把某个 path 暴露出来（注意 pub mod 下面的函数还是私有的，要显式标注 pub）。同样，pub 一个 struct 不会暴露这个 struct 的域。如：

#+BEGIN_SRC rust
pub struct Breakfast {
    pub toast: String,
    seasonal_fruit: String,
}
#+END_SRC

我们不能访问 Breakfast 实例的 seasonal_fruit 域。

但是 pub enum 的所有域都是可以访问的[fn:1]。

*** ~use~ 关键词

#+BEGIN_QUOTE
Adding use and a path in a scope is similar to creating a symbolic link in the filesystem. 
#+END_QUOTE

跟 python 的 ~import~ 和 ~import ... as ...~ 很相似。


#+BEGIN_SRC rust
mod front_of_house {
    pub mod hosting {
        pub fn add_to_waitlist() {}
    }
}

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}
#+END_SRC

此外，还可以用 pub use re-export （就是说引用这 mod 的时候，还能引用 ~crate::front_of_house::hosting~ ）。

*** Footnotes

[fn:1] 所以 rust 还是强推 enum。
