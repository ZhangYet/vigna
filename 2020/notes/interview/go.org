#+TITLE: go 面试相关
* go 相关面试题
  :PROPERTIES:
  :UNNUMBERED: t
  :END:

** goroutine 是什么？与线程和进程有什么区别？

与线程的区别在于：

1. 初始分配的栈空间很小2k；
2. goroutine 由 go runtime 调度，不需要系统调用（免去内核态和用户态的交互）；
3. 上下文切换代价也更小；

见： https://studygolang.com/articles/23191

** GMP 模型简述

见：http://morsmachine.dk/go-scheduler

G: stack, the instruction pointer and other information important for scheduling goroutines 可以理解成实际要执行的程序。

M: OS thread.

P: a context for scheduling.

每个 P 有独立的 G 队列，从队列中消耗 G，如果有一个 G 因为系统调用阻塞，这个 G 被移到一个空闲的（或者新的） M 上面，直到阻塞结束，再找一个 P 完成，空闲的 P 会从全局队列或者其他 P 的队列中抢 G。

** go struct 能不能比较？

不能，同struck 的实例可以比较。

** go slice 内存管理

明天要总结一下[[https://blog.golang.org/go-slices-usage-and-internals][这篇文章]]。

1. 定义 array 的方法： ~[4]int~ , go 的 array 是值，每次传递都是传一个 copy 过去。
2. slice 的零值是 nil。
3. slice 每次切片都会创建新的 slice 实例。
4. slice 底层其实有三个域：len, cap 和指向 array 的指针。
5. 切片的时候，slice 创建一个新的 slice，只需要一个新的 len，一个新的 cap，和一个指向旧 array 一部分的指针。
6. slice 并不会自动扩容，但是 append 会帮你把底层的 array 扩容，一般是原来的 cap 乘2。

** 为什么 channel 是线程安全的

没啥好解答。

** go sync 锁的分类和原理

Mutex: 正常态下新创建的 goroutine 会最快获得 routine，饥饿状态下，新创建的 goroutine 放在队尾，真正 FIFO。如果一个 Goroutine 获得了互斥锁并且它在队列的末尾或者它等待的时间少于 1ms，那么当前的互斥锁就会被切换回正常模式。

RWMutex: 写锁其实就是一个 Mutex。

其他内容见：https://draveness.me/golang/docs/part3-runtime/ch06-concurrency/golang-sync-primitives/

** go 内存垃圾回收

*** 三色标记

[[https://juejin.im/post/5c8525666fb9a049ea39c3e6][掘金文章]]

[[http://legendtkl.com/2017/04/28/golang-gc/][博客文章]]

1. 所有创建的对象标识为白色；
2. 扫描所有可达的对象，标识为灰色；
3. 从灰色对象中找到引用对象，将引用对象标识为灰色，对象本身标识为黑色；
4. 清除所有白色对象；

不变量：黑色对象不能引用白色对象。

1. 首先从 root 开始遍历，root 包括全局指针和 goroutine 栈上的指针。
2. mark 有两个过程。

   2.1 从 root 开始遍历，标记为灰色。遍历灰色队列。

   2.2 re-scan 全局指针和栈。因为 mark 和用户程序是并行的，所以在过程 1 的时候可能会有新的对象分配，这个时候就需要通过写屏障（write barrier）记录下来。re-scan 再完成检查一下。

3. Stop The World 有两个过程。

    3.1. 第一个是 GC 将要开始的时候，这个时候主要是一些准备工作，比如 enable write barrier。

    3.2. 第二个过程就是上面提到的 re-scan 过程。如果这个时候没有 stw，那么 mark 将无休止。

#+BEGIN_QUOTE
No black object may contain a pointer to a white object.

https://github.com/golang/proposal/blob/master/design/17503-eliminate-rescan.md
#+END_QUOTE

*** 写屏障
基于[[https://draveness.me/golang/docs/part3-runtime/ch07-memory/golang-garbage-collector/][这篇文章]]。

**** 插入写屏障

 #+BEGIN_SRC c
 writePointer(slot, ptr):
     shade(ptr)
     *field = ptr
 #+END_SRC

#+BEGIN_QUOTE
上述插入写屏障的伪代码非常好理解，每当我们执行类似 *slot = ptr 的表达式时，我们会执行上述写屏障通过 shade 函数尝试改变指针的颜色。如果 ptr 指针是白色的，那么该函数会将该对象设置成灰色，其他情况则保持不变。
#+END_QUOTE

插入写屏障可以保证强三色不变性。

****  Yuasa 删除写屏障

#+BEGIN_SRC c
writePointer(slot, ptr)
    shade(*slot)
    *slot = ptr
#+END_SRC

#+BEGIN_QUOTE
上述代码会在老对象的引用被删除时，将白色的老对象涂成灰色，这样删除写屏障就可以保证弱三色不变性，老对象引用的下游对象一定可以被灰色对象引用。
#+END_QUOTE

**** 混合写屏障
#+BEGIN_SRC c
writePointer(slot, ptr):
    shade(*slot)
    if current stack is grey:
        shade(ptr)
    *slot = ptr
#+END_SRC

** 什么是 interface

首先 interface 是一种类型，从它的定义可以看出来用了 type 关键字，更准确的说 interface 是一种具有一组方法的类型，这些方法定义了 interface 的行为。

** interface 的实现者的 receiver 
如果是按 pointer 调用，go 会自动进行转换，因为有了指针总是能得到指针指向的值是什么，如果是 value 调用，go 将无从得知 value 的原始值是什么，因为 value 是份拷贝。go 会把指针进行隐式转换得到 value，但反过来则不行。

** nil interface 问题
https://golang.org/doc/faq#nil_error

#+BEGIN_SRC go
package main

import "fmt"

type MyError struct {
    code int
}

func (this *MyError) Error() string {
 	   return fmt.Sprintf("code: %d", this.code)
}

func returnError() error {
	var p *MyError = nil
	return p
}

func main() {
	if err := returnError(); err != nil {
		fmt.Println("stop the world!")
	} else {
		fmt.Println("impossible")
	}
}
#+END_SRC

上面的程序会输出 ~stop the world!~ ，因为 interface 一般带有 Type 和 Value，只有两个值都是 nil 的情况下，才会等于 nil。上面的例子里面，type 不等于 nil。

** 如何优雅关闭 go channel

#+BEGIN_QUOTE
One general principle of using Go channels is don't close a channel from the receiver side and don't close a channel if the channel has multiple concurrent senders. In other words, we should only close a channel in a sender goroutine if the sender is the only sender of the channel.

https://go101.org/article/channel-closing.html
#+END_QUOTE

** [[https://reading.developerlearning.cn/interview/#][面试专题]]

*** 面试题解析一

**** defer 的问题

#+BEGIN_SRC go
package main

import (
    "fmt"
)

func main() {
    defer_call()
}

func defer_call() {
    defer func() { fmt.Println("打印前") }()
    defer func() { fmt.Println("打印中") }()
    defer func() { fmt.Println("打印后") }()

    panic("触发异常")
}
#+END_SRC

defer 是后进先出的，所以后面的 defer 会先输出，最后才输出 panic 的内容。

**** range 的问题

#+BEGIN_SRC go
import (
	"fmt"
)

type student struct {
	Name string
	Age  int
}

func parse_student() map[string]*student{
	m := make(map[string]*student)
	stus := []student{
		{Name: "zhou", Age: 24},
		{Name: "li", Age: 23},
		{Name: "wang", Age: 22},
	}
	for _, stu := range stus {
		m[stu.Name] = &stu
	}
	return m
}

func main() {
	m := parse_student()
	for k, v := range m{
		fmt.Printf("key: %s, Name %s: age: %d\n", k, v.Name, v.Age)
	}
}
#+END_SRC

上面代码的问题是 range 带来的，range 在处理遍历的时候，会把 value 赋值给一个临时变量，因为这中间存在了复制，所以所有指针都被复制成同一个了。把指针改成值就不会有这种烦恼了。

#+BEGIN_QUOTE
遇到这种同时遍历索引和元素的 range 循环时，Go 语言会额外创建一个新的 v2 变量存储切片中的元素，循环中使用的这个变量 v2 会在每一次迭代被重新赋值，在赋值时也发生了拷贝。

[[https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-for-range/#heading-4][《go 语言设计与实现》]]
#+END_QUOTE

**** goroutine 闭包

#+BEGIN_QUOTE go
package main

import (
	"fmt"
	"runtime"
	"sync"
)

func main() {
	runtime.GOMAXPROCS(1)
	wg := sync.WaitGroup{}
	wg.Add(20)
	for i := 0; i < 10; i++ {
		go func() {
			fmt.Println("A: ", i)
			wg.Done()
		}()
	}
	for i := 0; i < 10; i++ {
	        go func(i int) {
			fmt.Println("B: ", i)
			wg.Done()
		}(i)
	}
	wg.Wait()
}
#+END_QUOTE

A 会输出随机字符（虽然实际上测试了好几次都是10），主要是因为 go func 中 i 是外部 for 的一个变量，地址不变化，但是值都在改变。

**** 组合继承

#+BEGIN_SRC go
package main

import "fmt"

type People struct{}

func (p *People) ShowA() {
	fmt.Println("showA")
	p.ShowB()
}
func (p *People) ShowB() {
	fmt.Println("showB")
}

type Teacher struct {
	People
}

func (t *Teacher) ShowB() {
	fmt.Println("teacher showB")
}

func main() {
	t := Teacher{}
	t.ShowA()
}
#+END_SRC

输出 "showA\nshowB"。

**** make 初始化问题

#+BEGIN_SRC go
package main

import "fmt"

func main() {
	s := make([]int, 5)
	s = append(s, 1, 2, 3)
	fmt.Println(s)
}
#+END_SRC

输出的结果是 ~[0 0 0 0 0 1 2 3]~, 原因是 [[https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-make-and-new/][make]] 会初始化对应的数据结构。

**** map 并发问题

并发读写的 map 的时候，可能会有 [[https://zhanghongtong.github.io/2018/07/04/golang-map%25E6%2595%25B0%25E6%258D%25AE%25E7%25BB%2593%25E6%259E%2584%25E4%25B8%258D%25E8%2583%25BD%25E5%25B9%25B6%25E5%258F%2591%25E8%25AF%25BB%25E5%2586%2599%25E9%2597%25AE%25E9%25A2%2598-fatal-error-concurrent-map-writes/][fatal error: concurrent map writes]]，解决办法大概就是 sync.Map.




